[tool.poetry]
name = "measuring-quality-of-life"
version = "0.1.0"
description = ""
authors = ["Emily <emilyrosesteyn@gmail.com>"]
license = "GNU General Public License"
readme = "README.md"
packages = [{ include = "utils", from = "src" }, { include = "modules", from = "src" }]

[tool.poetry.dependencies]
python = "^3.10,<3.12"
jupyter = "^1.0.0"
matplotlib = "^3.8.2"
pandas = "^2.0.2"
rasterio = "^1.3.6"
geopandas = "^0.14.0"
rioxarray = "^0.15.0"
earthpy = "^0.9.4"
tqdm = "^4.65.0"
# Issue between poetry and tensorflow metadata since >=2.11
# This is a temporary workaround
# related to https://github.com/python-poetry/poetry/issues/8271
# Inspired from https://github.com/tensorflow/tensorflow/blob/adb39b04e9cb116df4659a7e2de9eea27e62f25c/tensorflow/tools/pip_package/setup.py#L148-L162
tensorflow = { version = "^2.13.0" }
tensorflow-macos = { version = "^2.13.0", platform = "darwin", markers = "platform_machine=='arm64'" }
tensorflow-intel = { version = "^2.13.0", platform = "win32" }
tensorflow-cpu-aws = { version = "^2.13.0", platform = "linux", markers = "platform_machine=='arm64' or platform_machine=='aarch64'" }
# https://github.com/tensorflow/tensorflow/blob/adb39b04e9cb116df4659a7e2de9eea27e62f25c/tensorflow/tools/pip_package/setup.py#L107-L108
# https://github.com/python-poetry/poetry/issues/8271#issuecomment-1697740447
tensorflow-io-gcs-filesystem = [
    { version = ">= 0.23.1", markers = "platform_machine!='arm64' or platform_system!='Darwin'" },
    { version = "< 0.32.0", markers = "platform_system == 'Windows'" }
]
pydot = "^2.0.0"
graphviz = "^0.20.1"
scikit-learn = "^1.3.0"
pydotplus = "^2.0.2"
python-dotenv = "^1.0.0"
dvclive = "^3.1.0"
types-requests = "^2.31.0.20240106"
plotnine = "^0.12.4"
mpi4py = "3.1.3"

[tool.poetry.group.dev.dependencies]
mypy = "^1.5.1"
ruff = "^0.0.292"
pre-commit = "^3.4.0"
dvc = { extras = ["gdrive"], version = "^3.27.0" }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
disallow_any_unimported = false
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ['tests.*']
disallow_untyped_defs = false
strict_equality = false

[tool.ruff]
select = ["ALL"]
ignore = [
    "ANN", # Type hints related, let mypy handle these.
    "COM812", # "Trailing comma missing". If black is happy, I'm happy.
    "D", # Docstrings related
    "E501", # "Line too long". If black is happy, I'm happy.
    "EM101", # "Exception must not use a string literal, assign to variable first"
    "EM102", # "Exception must not use an f-string literal, assign to variable first"
    "PTH", # User Pathlib stuff over os.*. Should migrate to Pathlib at some point.
    "RET504", # "Unnecessary variable assignment before `return` statement"
    "S101", # "Use of `assert` detected"
    "SIM108", # "Use ternary operator ...". Ternary is harmful for readability in some cases.
    "TRY003", # "Avoid specifying long messages outside the exception class"
    "TD002", # Ignore to do errors
    "TD003",
    "FIX002",
    "G004", # Ignore f string in loggers
]
line-length = 88
target-version = "py37"